{
	"info": {
		"_postman_id": "3629d95c-2901-4331-bd12-10948757f644",
		"name": "API_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7648839",
		"_collection_link": "https://grey-desert-958027.postman.co/workspace/test~4368dfc4-b8bc-400f-aedc-aa204492e5a2/collection/7648839-3629d95c-2901-4331-bd12-10948757f644?action=share&source=collection_link&creator=7648839"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"random(pm, \"username\", 8);\r",
							"random(pm, \"password\", 12);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {               \r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.equals(\"User registered successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {               \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.token).to.be.not.null;\r",
							"    pm.expect(response.expiresIn).to.equals(\"1h\");\r",
							"    pm.collectionVariables.set(\"token\", response.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Bank Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"randomNumber(pm, \"accountNumber\", 8);\r",
							"randomNumber(pm, \"balance\", 6);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {               \r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.equals(\"Bank account created\");\r",
							"    pm.expect(response.account.accountNumber).to.equals(pm.collectionVariables.get(\"accountNumber\"));\r",
							"    pm.expect(response.account.balance).to.equals(pm.collectionVariables.get(\"balance\"));\r",
							"    pm.expect(response.account.owner).to.equals(pm.collectionVariables.get(\"username\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"accountNumber\": \"{{accountNumber}}\",\r\n  \"balance\": \"{{balance}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/bankAccounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"bankAccounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Bank Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"randomNumber(pm, \"balance\", 6);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {               \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.equals(\"Bank account updated\");\r",
							"    pm.expect(response.account.accountNumber).to.equals(pm.collectionVariables.get(\"accountNumber\"));\r",
							"    pm.expect(response.account.balance).to.equals(pm.collectionVariables.get(\"balance\"));\r",
							"    pm.expect(response.account.owner).to.equals(pm.collectionVariables.get(\"username\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"balance\": \"{{balance}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/bankAccounts/{{accountNumber}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"bankAccounts",
						"{{accountNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bank Accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {               \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(Array.isArray(response)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/bankAccounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"bankAccounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "me",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {               \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.equals(\"Hello, \" + pm.collectionVariables.get(\"username\"))\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/me",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {               \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(Array.isArray(response)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Bank Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {               \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response\", function () {               \r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.equals(\"Bank account deleted\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/bankAccounts/{{accountNumber}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"bankAccounts",
						"{{accountNumber}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function generateRandomString(length) {\r",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    let result = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"random = function(pm, fieldName, length) {\r",
					"    pm.collectionVariables.set(fieldName, generateRandomString(length));\r",
					"}\r",
					"\r",
					"function generateRandomNumber(length) {\r",
					"    let result = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        result += Math.floor(Math.random() * 10);\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"randomNumber = function(pm, fieldName, length) {\r",
					"    pm.collectionVariables.set(fieldName, generateRandomNumber(length));\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "accountNumber",
			"value": ""
		},
		{
			"key": "balance",
			"value": ""
		}
	]
}